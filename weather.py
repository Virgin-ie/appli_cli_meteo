import argparse
import json
import sys
from configparser import ConfigParser
from urllib import error, parse, request

import style

# une constante s'√©crit en majuscule
# d√©fini 'BASE_WEATHER_API_URL' comme une constante vu que tous les appels API passerons par cette base de l'url
BASE_WEATHER_API_URL = "http://api.openweathermap.org/data/2.5/weather"

# codes/ID pour les conditions m√©t√©orologiques
# plus d'info : https://openweathermap.org/weather-conditions#Weather-Condition-Codes-2
THUNDERSTORM = range(200, 300)   # ORAGE
DRIZZLE = range(300, 400)        # BRUINE
RAIN = range(500, 600)           # PLUIE
SNOW = range(600, 700)           # NEIGE
ATMOSPHERE = range(700, 800)     # ATMOSPHERE
CLEAR = range(800, 801)          # CLAIR/DEGAGER
CLOUDY = range(801, 900)         # NUAGEUX


def read_user_cli_args():
    """
    G√®re les interactions des utilisateurs CLI.

    terminal :
    python weather.py -h Pour obtenir de l'aide et conna√Ætre les options disponibles
                      - i OU --imperial Demander la temp√©rature en unit√©s imp√©rials (Fahrenheit)
    :return:
        argparse.Namespace: Populated namespace object
    """
    # cr√©er une instance de 'argparse.ArgumentParser', √† laquelle on transmet une description facultative de l'analyseur
    # renvoie les r√©sultats d'un appel √† '.parse_args()', qui seront les valeurs saisies par l'utilisateur
    parser = argparse.ArgumentParser(
        description="Obtenir des informations sur la m√©t√©o et la temp√©rature d'une ville"
    )
    # l'argument 'city' prendra une ou plusieurs entr√©es s√©par√©es par des espaces, en d√©finissant le nombres d'arguments
    # 'nargs' sur '+', on autorise l'utilisateur √† transmettre des noms de ville compos√©s de plusieurs mots ex: New York
    # l'argument de mot-cl√© 'help' d√©finit le texte d'aide qui est ensuite rendu disponible via l'indicateur '-h'
    parser.add_argument(
        "city", nargs="+", type=str, help="Entrer le nom de la ville"
    )
    # d√©finit l'argument bool√©en facultatif 'imperial'
    # d√©finit l'argument du mot-cl√© 'action' sur 'store-true', ce qui signifie que la valeur de 'imperial' sera 'True'
    # si les utilisateurs ajoutent l'indicateur facultatif, et 'False' s'ils ne le font pas
    parser.add_argument(
        "-i",
        "--imperial",
        action="store_true",
        help="Afficher la temp√©rature en unit√©s imp√©riales (Fahrenheit)"
    )
    return parser.parse_args()


def build_weather_query(city_input, imperial=False):
    """
    Construit l'URL d'une demande d'API √† l'API m√©t√©o d'OpenWeather

    :param city_input: (List[str]): Nom d'une ville tel que collect√© par 'argparse'
    :param imperial: valeur bool√©enne qui d√©cidera d'afficher la temp√©rature en degr√©s Celsius ou Fahrenheit
                     valeur par d√©faut pour cet argument = False
    :return:
        str: URL format√©e pour un appel au point de terminaison de nom de ville d'OpenWeather
    """
    # appel '_get_api_key' pour r√©cup√©rer la cl√© API √† partir du fichier de configuration et l'enregistre en tant que
    # 'api_key'
    api_key = _get_api_key()
    # utilise 'str.join()' pour concat√©ner les mots qui compose un m√™me nom de ville avec un caract√®re
    # d'espacement (" ") si un nom de ville se compose de plus d'un mot
    city_name = " ".join(city_input)
    # fonction du module 'urllib.parse' pour aider √† nettoyer l'entr√©e de l'utilisateur afin que l'API puisse la
    # consommer en toute s√©curit√©.
    # passe 'city_name' √† 'parse.quote_plus()', qui encode la cha√Æne afin d'envoyer une requ√™te HTTP valide √† l'API.
    # Outre la conversion de certains caract√®res via l'encodage UTF-8, cette fonction convertit √©galement les
    # caract√®res d'espacement en symboles plus(+), qui est une forme d'encodage d'URL n√©cessaire pour les appels
    # appropri√©s √† cette API.
    url_encoded_city_name = parse.quote_plus(city_name)
    # utilise une expression conditionnelle pour affecter soit 'imperial' ou 'metric' √† 'units, selon que le param√®tre
    # imperial est True ou False
    units = "imperial" if imperial else "metric"
    url = (
        f"{BASE_WEATHER_API_URL}?q={url_encoded_city_name}"
        f"&units={units}&appid={api_key}"
    )
    return url


# Cr√©er une fonction non public (commence par _ ) nomm√©e 'get_api_key()', qui encapsule la logique de code pour acc√©der
# √† la cl√© API OpenWeather
def _get_api_key():
    """
    R√©cup√©rer la cl√© API √† partir du fichier de configuration.
    Attend un fichier de configuration nomm√© 'secrets.ini' avec la structure
    [openweather]
    api_key=<your-openweather-api-key>
    """
    # instancie un objet 'ConfigParser' nomm√©e 'Config'
    # utilise '.read' pour charger les informations enregistr√©es dans 'secrets.ini'
    # renvoie la valeur de la cl√© API en acc√©dant √† la valeur du dictionnaire √† l'aide de la notation entre crochets
    config = ConfigParser()
    config.read("secrets.ini")
    return config["openweather"]["api_key"]


# fonction qui permet d'avoir un affichage dans la console √† la place d'avoir le r√©sultat dans le navigateur
def get_weather_data(query_url):
    """
    Envoie une requ√™te API √† une URL et renvoie les donn√©es sous la forme d'un objet Python

    :arg:
        query_url (str): URL format√©e pour le point de terminaison du nom de la ville d'OpenWeather
    :return:
        dict: Informations m√©t√©orologiques pour une ville sp√©cifique
    """
    # utilise 'urllib.request.urlopen()' pour faire une requ√™te HTTP GET au param√®tre 'query_url' et enregistre le
    # r√©sultat sous 'response'
    try:
        response = request.urlopen(query_url)
    except error.HTTPError as http_error:
        if http_error.code == 401:         # 401 Unauthorized / Non autoris√©
            sys.exit("Acc√®s refus√©. V√©rifiez votre cl√© API.")
        elif http_error.code == 404:       # 404 Not Found / Introuvable
            sys.exit("Impossible de trouver les donn√©es m√©t√©os pour cette ville :(")
        else:
            sys.exit(f"Quelque chose c'est mal pass√© .. ({http_error.code})")

    # extrait les donn√©es de la r√©ponse
    data = response.read()

    # renvoi un appel √† 'json.loads()' avec 'data' comme argument. La fonction renvoie un objet Python contenant
    # les informations JSON extraites de query_url. la gestion des erreurs 'try' et 'except' permet de lutter contre le
    # JSON potentiellement malform√© que l'API pourrait vous envoyer
    try:
        return json.loads(data)
    except json.JSONDecodeError:
        sys.exit("Impossible de lire la r√©ponse du serveur")


# Cr√©er une fonction d'affichage
def display_weather_info(weather_data, imperial=False):
    """
    Imprime des informations m√©t√©o format√©es sur une ville

    :arg:
        weather_data (dict): R√©ponse API d'OpenWeather par nom de ville
        imperial (bool): Utiliser ou non les unit√©s imp√©riales pour la temp√©rature

    Plus d'informations sur http://openweathermap.org/current#name
    """
    # s√©lectionnent les donn√©es pertinentes pour 'city', 'weather_description' et 'temperature' dans le dictionnaire
    # 'weather_data' et les affectent aux variables
    city = weather_data["name"]
    # afficher les conditions m√©t√©o en couleur en fonction de leurs ID
    weather_id = weather_data["weather"][0]["id"]
    weather_description = weather_data["weather"][0]["description"]
    temperature = weather_data["main"]["temp"]

    # end="", d√©finit le caract√®re final sur un caract√®re d'espacement au lieu du caract√®re de nouvelle ligne par d√©faut
    # ^{PADDING}, centre le nom de la ville en fonction de sa longueur
    # REVERSE et RESET pour modifier la couleur (surbriance) de sortie du terminal
    style.change_color(style.GREEN)
    print(f"{city:^{style.PADDING}}", end="")
    style.change_color(style.RESET)

    # weather_symbol = emojis
    weather_symbol, color = _select_weather_display_params(weather_id)

    style.change_color(color)
    print(f"\t{weather_symbol}", end=" ")
    print(
        f"{weather_description.capitalize():^{style.PADDING}}",
        end=" "
    )
    style.change_color(style.RESET)

    # imprime les infos. de temp√©rature, puis utilise une expression conditionnelle qui repose sur la valeur bool√©enne
    # de 'imperial' pour d√©cider d'imprimer un 'F'  pour Fahrenheit ou un 'C' pour Celsius
    print(f"({temperature}¬∞{'F' if imperial else 'C'})")


# associe une couleur avec l'ID/code de la condition m√©t√©ologique
def _select_weather_display_params(weather_id):
    if weather_id in THUNDERSTORM:
        display_params = ("üå©", style.RED)
    elif weather_id in DRIZZLE:
        display_params = ("‚òî", style.CYAN)
    elif weather_id in RAIN:
        display_params = ("üíß", style.BLUE)
    elif weather_id in SNOW:
        display_params = ("‚ùÑ", style.WHITE)
    elif weather_id in ATMOSPHERE:
        display_params = ("üåå", style.BLUE)
    elif weather_id in CLEAR:
        display_params = ("‚òÄ", style.YELLOW)
    elif weather_id in CLOUDY:
        display_params = ("‚òÅ", style.WHITE)
    else:  # Dans le cas o√π l'API ajoute de nouveaux codes m√©t√©o
        display_params = ("üå°", style.RESET)
    return display_params


if __name__ == "__main__":
    user_args = read_user_cli_args()
    query_url = build_weather_query(user_args.city, user_args.imperial)
    # appel 'get_weather_data()' en passant le 'query_url' qui est g√©n√©r√© avec 'build_weather_query()' puis enregistre
    # le dictionnaire dans 'weather_data'
    weather_data = get_weather_data(query_url)

    display_weather_info(weather_data, user_args.imperial)
